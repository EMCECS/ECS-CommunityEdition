- include_vars: main.yml
- include_vars: caches.yml

- name: Common | Create and modify paths and semaphores for docker containers
  file:
    path: "{{item.path}}"
    state: "{{item.state}}"
    mode: "{{item.mode}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
  with_items: "{{ecs_docker_dirs}}"
  tags: files
  loop_control:
    label: "{{item.path}}"

### Generate network.json
- name: Common | Generate network.json
  template: src=rev1-network.json.j2 dest=/host/data/network.json owner=444 group=444 force=no
  tags: files

### Generate object-main_network.json
- name: Common | Generate object-main_network.json
  template: src=object-main_network.json.j2 dest=/host/data/object-main_network.json owner=444 group=444 force=no
  tags: files

### Generate id.json
- name: Common | Generate id.json
  template: src=id.json.j2 dest=/host/data/id.json owner=444 group=444 force=no
  tags: files

### Generate agent.json
- name: Common | Generate agent.json
  template: src=agent.json.j2 dest=/host/data/agent.json owner=444 group=444 force=no
  tags: files

### Generate seeds file
- name: Common | Generate seeds file
  template: src=seeds.j2 dest=/host/files/seeds owner=444 group=444 force=no
  tags: files

- name: Common | Create GPT partition table(s) on ECS block device(s)
  command: /sbin/parted -s {{ item }} mklabel gpt
  with_items: "{{ecs_block_devices}}"

- name: Common | Partition ECS block device(s)
  command: /sbin/parted -s {{ item }} mkpart xfs 0% 100%
  with_items: "{{ecs_block_devices}}"

- name: Common | Check alignment of ECS partitions(s)
  command: /sbin/parted -s {{ item }} align-check opt 1
  with_items: "{{ecs_block_devices}}"

- name: Common | Format ECS partition(s)
  filesystem: fstype=xfs dev="{{ item }}1" force=yes
  with_items: "{{ ecs_block_devices }}"
  tags: disks

- name: Common | Gather block device UUIDs
  shell: blkid -s UUID -o value {{item}}1
  with_items: "{{ecs_block_devices}}"
  register: uuid
  when: product_version | version_compare('3.2', '<')

- name: Common | Gather block device partition UUIDs
  shell: blkid -s PARTUUID -o value {{item}}1
  with_items: "{{ecs_block_devices}}"
  register: uuid
  when: product_version | version_compare('3.2', '>=')

- name: Common | Make mountpoints for ECS block devices
  file: path="/ecs/uuid-{{ item.stdout }}" state=directory recurse=yes owner=444 group=444
  with_items: "{{ uuid.results }}"
  tags: disks
  loop_control:
    label: "/ecs/uuid-{{ item.stdout }}"

- name: Common | Mount partitions and create fstabs
  mount:
    src: "{{ item.1 }}1"
    name: "/ecs/uuid-{{ item.0.stdout }}"
    fstype: xfs
    state: mounted
    opts: rw,noatime,attr2,inode64,noquota
    dump: 0
    passno: 0
  with_together:
    - "{{ uuid.results }}"
    - "{{ ecs_block_devices }}"
  tags: disks
  loop_control:
    label: "/ecs/uuid-{{ item.0.stdout }}"

- name: Common | Create blockbins on partitions
  script: additional_prep.sh {{ item }}1
  with_items: "{{ ecs_block_devices }}"

- name: Common | Import ECS docker image (This takes a few minutes.)
  shell: "{{caches.docker.unpack_cmd}} && touch {{host_cache_dir}}/docker/{{caches.docker.unpack_sem}}"
  args:
      chdir: "{{host_cache_dir}}/docker"
      creates: "{{host_cache_dir}}/docker/{{caches.docker.unpack_sem}}"
  when:
    - flag_install_node is not defined
    - not ( num_data_nodes|int == 1 and top_data_node == install_node )
    - not ( ansible_local is defined and ansible_local.ova is defined )

- name: Common | Update block storage path permissions
  file:
    path: "{{item.path}}"
    state: "{{item.state}}"
    mode: "{{item.mode}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    recurse: "{{item.recurse}}"
  with_items: "{{ecs_docker_dirs_post}}"
  tags: files
  loop_control:
    label: "{{ item.path }}"

#- name: Common | Tag ECS Docker image
#  shell: /usr/bin/docker tag {{ecs_software_image}} {{ecs_software_image}}:latest
#  when: flag_install_node is not defined
