- include_vars: main.yml

### This is where we put all the adjusted configs
#- name: Common | Create a data container for ECS configuration control
#  shell: docker run -d -v /opt/storageos/conf -v /opt/storageos/ecsportal/conf -v /etc --name ecs-config --restart=no --entrypoint=/bin/echo {{product_common_name}} "ECS configuration data container" && touch {{host_cache_dir}}/ecs-config.created creates="{{host_cache_dir}}/ecs-config.created"

- name: Common | Create a data container for ECS configuration control
  docker_container:
    image: "{{product_common_name}}"
    name: ecs-config
    detach: true
    restart_policy: no
    volumes:
      - /opt/storageos/conf
      - /opt/storageos/bin
      - /opt/storageos/ecsportal/conf
      - /etc
    entrypoint: /bin/echo "ECS configuration data container"
    state: present

### Determine any sizing we need to calculate templates
#
# [X]Block device size
# ref: https://github.com/EMCECS/ECS-CommunityEdition/issues/75
#      Enables expanding SSM parameters on systems with >1TB Disk #75
#
# TAG: 2.1.0
# [X]Conditionally switch between reduced and standard deployments
# based on memory size.  >64MiB, we deploy standard.
# ref: https://github.com/EMCECS/ECS-CommunityEdition/issues/74
#  Installer should support installing a "full" build on systems with 64GB RAM+ #74

- name: Common | Copy configurations out of configuration data container
  command: docker cp ecs-config:{{item}} /host/{{item.split('/')[-1]}}
  with_items: "{{config_files}}"
  loop_control:
    label: "{{item}}"
#    - dest: /host/application.conf
#      src: /opt/storageos/ecsportal/conf/application.conf

### Perform properties edits

## ssm configuration
- name: 'Common | Configure SSM Object properties: FBL-Highwater'
  lineinfile:
    dest: /host/ssm.object.properties
    state: present
    regexp: '^object\.freeBlocksHighWatermarkLevels=[0-9]*,[0-9]*'
    line: 'object.freeBlocksHighWatermarkLevels={{ "100,50" if ansible_local.data_node.ecs_block_size|int < 1000000000000 else "1000,200" }}'
- name: 'Common | Configure SSM Object properties: FBL-Lowwater'
  lineinfile:
    dest: /host/ssm.object.properties
    state: present
    regexp: '^object\.freeBlocksLowWatermarkLevels=[0-9]*,[0-9]*'
    line: 'object.freeBlocksLowWatermarkLevels={{ "0,20" if ansible_local.data_node.ecs_block_size|int < 1000000000000 else "0,100" }}'
- name: 'Common | Configure Common Object properties: allowAllocationOnIgnoredPartitions'
  lineinfile:
    dest: /host/ssm-cf-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)name="allowAllocationOnIgnoredPartitions" value="false"(.*)'
    line: '\1name="allowAllocationOnIgnoredPartitions" value="true"\2'

## Common Object Properties
# When NumDtPerCoS is set to 128 (>=64GB RAM) then the number of btree
# and journal chunks for write quadruples. This means when node count is
# less than ~4 and total storage space is less than ~4TB, 128 NumDtPerCoS
# can become unwieldy. This templated param should take into account node
# count and total storage space available. https://github.com/EMCECS/ECS-CommunityEdition/issues/301
- name: 'Common | Configure Common Object properties: System NumDtPerCoS'
  lineinfile:
    dest: /host/common.object.properties
    state: present
    regexp: '^object\.NumDirectoriesPerCoSForSystemDT=[0-9]*'
    line: 'object.NumDirectoriesPerCoSForSystemDT={{ "128" if ( ansible_memtotal_mb|int > 65536 and ansible_local.data_node.ecs_block_size|int > 1000000000000 and num_data_nodes|int > 3 ) else "32" }}'
- name: 'Common | Configure Common Object properties: User NumDtPerCoS'
  lineinfile:
    dest: /host/common.object.properties
    state: present
    regexp: '^object\.NumDirectoriesPerCoSForUserDT=[0-9]*'
    line: 'object.NumDirectoriesPerCoSForUserDT={{ "128" if ( ansible_memtotal_mb|int > 65536 and ansible_local.data_node.ecs_block_size|int > 1000000000000 and num_data_nodes|int > 3 ) else "32" }}'

## cm configuration
- name: 'Common | Configure CM Object properties: Disable Minimum Node Count'
  lineinfile:
    dest: /host/cm.object.properties
    state: present
    regexp: 'object.MustHaveEnoughResources=true'
    line: 'object.MustHaveEnoughResources=false'
- name: 'Common | Configure CM Read Page Cache: Max'
  lineinfile:
    dest: /host/cm-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)key="object.BPlusTreeReaderOnHeapCacheV2MemoryMaxSize">536870912(.*)'
    line: '\1key="object.BPlusTreeReaderOnHeapCacheV2MemoryMaxSize">52428800\2'
- name: 'Common | Configure CM Read Page Cache: Core'
  lineinfile:
    dest: /host/cm-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)key="object.BPlusTreeReaderOnHeapCacheV2MemoryCoreSize">419430400(.*)'
    line: '\1key="object.BPlusTreeReaderOnHeapCacheV2MemoryCoreSize">41943040\2'
- name: 'Common | Configure CM DT Write IO: OnHeap Buffers'
  lineinfile:
    dest: /host/cm-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)name="initialBufferNumOnHeap" value="10"(.*)'
    line: '\1name="initialBufferNumOnHeap" value="4"\2'
- name: 'Common | Configure CM Geo Shipping IO: OnHeap Buffers'
  lineinfile:
    dest: /host/cm-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)key="object.InitialBufferNumOnHeap">50(.*)'
    line: '\1key="object.InitialBufferNumOnHeap">4\2'

## georeceiver configuration
# Set georeceiver's initialBufferNumOnHeap to something smaller for CE
- name: 'Common | Configure georeceiver initialBufferNumOnHeap (1/2)'
  lineinfile:
    dest: /host/georeceiver-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)name="initialBufferNumOnHeap" value="40"(.*)'
    line: '\1name="initialBufferNumOnHeap" value="5"\2'
- name: 'Common | Configure georeceiver initialBufferNumOnHeap (2/2)'
  lineinfile:
    dest: /host/georeceiver-conf.xml
    state: present
    backrefs: yes
    regexp: '^(.*)key="object.InitialBufferNumOnHeap">80(.*)'
    line: '\1key="object.InitialBufferNumOnHeap">10\2'

## dtquery configuration
- name: 'Common | Increase memory for dtquery'
  lineinfile:
    dest: /host/dtquery
    state: present
    backrefs: yes
    regexp: '^(.*)Xmx128m(.*)$'
    line: '\1Xmx256m\2'

## transformsvc configuration
- name: 'Common | Increase memory for transformsvc'
  lineinfile:
    dest: /host/transformsvc
    state: present
    backrefs: yes
    regexp: '^(.*)Xmx128m(.*)$'
    line: '\1Xmx512m\2'

## objcontrolsvc configuration
- name: 'Common | Increase memory for objcontrolsvc'
  lineinfile:
    dest: /host/objcontrolsvc
    state: present
    backrefs: yes
    regexp: '^(.*)Xmx96m(.*)$'
    line: '\1Xmx256m\2'

## vnest configuration
- name: 'Common | vnest enable UseSeparateThreadPools'
  lineinfile:
    dest: /host/vnest-common-conf.xml
    state: present
    insertafter: '<util:properties id="serviceProperties" location="classpath:systemsvc.object.properties" local-override="true">'
    line: '        <prop key="object.UseSeparateThreadPools">true</prop>'

## sr configuration
- name: 'Common | Increase memory for sr'
  lineinfile:
    dest: /host/sr
    backrefs: yes
    regexp: '^(.*)Xmx384m(.*)$'
    line: '\1Xmx768m\2'


## blobsvc configuration
- name: 'Common | Increase memory for blobsvc'
  lineinfile:
    dest: /host/blobsvc
    backrefs: yes
    regexp: '^(.*)Xmx2688m(.*)$'
    line: '\1Xmx3584m\2'

### Then docker cp them into the configuration container
- name: Common | Merge configurations into configuration data container
  command: docker cp /host/{{item.split('/')[-1]}} ecs-config:{{item}}
  with_items: "{{config_files}}"
  loop_control:
    label: "{{item}}"

#- name: debug docker create ecs-storageos
#  debug:
#    msg: docker create --name ecs-storageos -e SS_GENCONFIG=1 --volumes-from ecs-config -v /ecs:/dae:z -v /ecs:/disks:z -v /host:/host:z -v /var/log/vipr/emcvipr-object:/var/log:z -v /data:/data:z -v {{host_cache_dir}}/ecs_python:/host/ecs_python:z -v {{entropy_source}}:/dev/random:z --net=host {{product_common_name}} && touch {{host_cache_dir}}/ecs-storageos.created creates={{host_cache_dir}}/ecs-storageos.created

# Don't add a restart policy because we're using init scripts for that.

#- name: Common | Create the ECS StorageOS container
#  shell: docker create --name ecs-storageos -e SS_GENCONFIG=1 --volumes-from ecs-config -v /ecs:/dae:z -v /ecs:/disks:z -v /host:/host:z -v /var/log/vipr/emcvipr-object:/var/log:z -v /data:/data:z -v {{host_cache_dir}}/ecs_python:/host/ecs_python:z -v {{entropy_source}}:/dev/random:z --net=host {{product_common_name}} && touch {{host_cache_dir}}/ecs-storageos.created creates="{{host_cache_dir}}/ecs-storageos.created"

### And run the ECS container
- name: Common | Create the ECS StorageOS container
  docker_container:
    image: "{{product_common_name}}"
    name: ecs-storageos
    detach: true
    network_mode: host
    env:
      SS_GENCONFIG: 1
    volumes_from:
      - ecs-config
    volumes:
      - /ecs:/dae:z
      - /ecs:/disks:z
      - /host:/host:z
      - /var/log/vipr/emcvipr-object:/var/log:z
      - /data:/data:z
      - "{{entropy_source}}:/dev/random:z"
    restart_policy: no
    stop_timeout: 300
    state: present
    privileged: yes

