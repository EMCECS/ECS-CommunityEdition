- include_vars: main.yml

### This is where we put all the adjusted configs
#- name: Common | Create a data container for ECS configuration control
#  shell: docker run -d -v /opt/storageos/conf -v /opt/storageos/ecsportal/conf -v /etc --name ecs-config --restart=no --entrypoint=/bin/echo {{product_common_name}} "ECS configuration data container" && touch {{host_cache_dir}}/ecs-config.created creates="{{host_cache_dir}}/ecs-config.created"

- name: Common | Create a data container for ECS configuration control
  docker:
    image: "{{product_common_name}}"
    name: ecs-config
    detach: true
    restart_policy: no
    volumes:
      - /opt/storageos/conf
      - /opt/storageos/ecsportal/conf
      - /etc
    entrypoint: /bin/echo "ECS configuration data container"
    state: present

### Determine any sizing we need to calculate templates
#
# [X]Block device size
# ref: https://github.com/EMCECS/ECS-CommunityEdition/issues/75
#      Enables expanding SSM parameters on systems with >1TB Disk #75
#
# TAG: 2.1.0
# [X]Conditionally switch between reduced and standard deployments
# based on memory size.  >64MiB, we deploy standard.
# ref: https://github.com/EMCECS/ECS-CommunityEdition/issues/74
#  Installer should support installing a "full" build on systems with 64GB RAM+ #74

- name: Common | Copy configurations out of configuration data container
  command: docker cp ecs-config:{{item.src}} {{item.dest}}
  with_items:
    - dest: /host/ssm.object.properties
      src: /opt/storageos/conf/ssm.object.properties
    - dest: /host/common.object.properties
      src: /opt/storageos/conf/common.object.properties
    - dest: /host/cm.object.properties
      src: /opt/storageos/conf/cm.object.properties
  loop_control:
    label: "{{item.src}}"
#    - dest: /host/application.conf
#      src: /opt/storageos/ecsportal/conf/application.conf

## Perform properties edits

## SSM Object Properties
# object.freeBlocksHighWatermarkLevels
- name: 'Common | Configure SSM Object properties: FBL-Highwater'
  lineinfile:
    dest: /host/ssm.object.properties
    state: present
    regexp: '^object\.freeBlocksHighWatermarkLevels=[0-9]*,[0-9]*'
    line: 'object.freeBlocksHighWatermarkLevels={{ "100,50" if ansible_local.data_node.ecs_block_size|int < 1000000000000 else "1000,200" }}'

# object.freeBlocksLowWatermarkLevels
- name: 'Common | Configure SSM Object properties: FBL-Lowwater'
  lineinfile:
    dest: /host/ssm.object.properties
    state: present
    regexp: '^object\.freeBlocksLowWatermarkLevels=[0-9]*,[0-9]*'
    line: 'object.freeBlocksLowWatermarkLevels={{ "0,20" if ansible_local.data_node.ecs_block_size|int < 1000000000000 else "0,100" }}'

## Common Object Properties
# When NumDtPerCoS is set to 128 (>=64GB RAM) then the number of btree
# and journal chunks for write quadruples. This means when node count is
# less than ~4 and total storage space is less than ~4TB, 128 NumDtPerCoS
# can become unwieldy. This templated param should take into account node
# count and total storage space available. https://github.com/EMCECS/ECS-CommunityEdition/issues/301

# object.NumDirectoriesPerCoSForSystemDT
- name: 'Common | Configure Common Object properties: System NumDtPerCoS'
  lineinfile:
    dest: /host/common.object.properties
    state: present
    regexp: '^object\.NumDirectoriesPerCoSForSystemDT=[0-9]*'
    line: 'object.NumDirectoriesPerCoSForSystemDT={{ "128" if ( ansible_memtotal_mb|int > 65536 and ansible_local.data_node.ecs_block_size|int > 1000000000000 and num_data_nodes|int > 3 ) else "32" }}'

# object.NumDirectoriesPerCoSForUserDT
- name: 'Common | Configure Common Object properties: User NumDtPerCoS'
  lineinfile:
    dest: /host/common.object.properties
    state: present
    regexp: '^object\.NumDirectoriesPerCoSForUserDT=[0-9]*'
    line: 'object.NumDirectoriesPerCoSForUserDT={{ "128" if ( ansible_memtotal_mb|int > 65536 and ansible_local.data_node.ecs_block_size|int > 1000000000000 and num_data_nodes|int > 3 ) else "32" }}'

## CM Object Properties

# object.MustHaveEnoughResources
- name: 'Common | Configure CM Object properties: Disable Minimum Node Count'
  lineinfile:
    dest: /host/cm.object.properties
    state: present
    regexp: '^object\.MustHaveEnoughResources=true'
    line: 'object.MustHaveEnoughResources=false'

### Then docker cp them into the configuration container
- name: Common | Merge configurations into configuration data container
  command: docker cp {{item.src}} ecs-config:{{item.dest}}
  with_items:
    - src: /host/ssm.object.properties
      dest: /opt/storageos/conf/ssm.object.properties
    - src: /host/common.object.properties
      dest: /opt/storageos/conf/common.object.properties
    - src: /host/cm.object.properties
      dest: /opt/storageos/conf/cm.object.properties
  loop_control:
    label: "{{item.dest}}"
#    - src: /host/application.conf
#      dest: /opt/storageos/ecsportal/conf/application.conf
#    - src: postinstall_patch
#      dest: /etc/cron.hourly/postinstall_patch
#    - src: setup_python_requests
#      dest: /etc/cron.hourly/setup_python_requests


#- name: debug docker create ecs-storageos
#  debug:
#    msg: docker create --name ecs-storageos -e SS_GENCONFIG=1 --volumes-from ecs-config -v /ecs:/dae:z -v /ecs:/disks:z -v /host:/host:z -v /var/log/vipr/emcvipr-object:/var/log:z -v /data:/data:z -v {{host_cache_dir}}/ecs_python:/host/ecs_python:z -v {{entropy_source}}:/dev/random:z --net=host {{product_common_name}} && touch {{host_cache_dir}}/ecs-storageos.created creates={{host_cache_dir}}/ecs-storageos.created

# Don't add a restart policy because we're using init scripts for that.

#- name: Common | Create the ECS StorageOS container
#  shell: docker create --name ecs-storageos -e SS_GENCONFIG=1 --volumes-from ecs-config -v /ecs:/dae:z -v /ecs:/disks:z -v /host:/host:z -v /var/log/vipr/emcvipr-object:/var/log:z -v /data:/data:z -v {{host_cache_dir}}/ecs_python:/host/ecs_python:z -v {{entropy_source}}:/dev/random:z --net=host {{product_common_name}} && touch {{host_cache_dir}}/ecs-storageos.created creates="{{host_cache_dir}}/ecs-storageos.created"

### And run the ECS container
- name: Common | Create the ECS StorageOS container
  docker:
    image: "{{product_common_name}}"
    name: ecs-storageos
    detach: true
    net: host
    env:
      SS_GENCONFIG: 1
    volumes_from:
      - ecs-config
    volumes:
      - /ecs:/dae:z
      - /ecs:/disks:z
      - /host:/host:z
      - /var/log/vipr/emcvipr-object:/var/log:z
      - /data:/data:z
      - "{{entropy_source}}:/dev/random:z"
    restart_policy: no
    stop_timeout: 300
    state: present
    privileged: yes

